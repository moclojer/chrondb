name: Build Native Image

on:
  push:
    tags: [ 'v*' ]
  pull_request:
  workflow_dispatch:

jobs:
  # Optional check for tests - will not block the build if tests are not found
  check-for-tests:
    name: Check for Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Wait for tests to succeed
        id: wait-for-test
        uses: lewagon/wait-on-check-action@v1.3.4
        continue-on-error: true
        with:
          ref: ${{ github.ref }}
          check-name: 'test'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped
          verbose: true
          running-workflow-name: 'Build Native Image'

  build-native-image:
    name: Build Native Image
    # Remove the dependency on wait-for-tests
    # needs: wait-for-tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: chrondb-linux
            asset-name: chrondb-linux
          - os: macos-latest
            artifact-name: chrondb-macos
            asset-name: chrondb-macos

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Check JAVA versions
        run: |
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          java --version
          native-image --version

      - name: Install Clojure tools
        uses: DeLaGuardo/setup-clojure@12.1
        with:
          cli: latest

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/deps.edn') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build native image
        id: build-native
        continue-on-error: true
        env:
          OUTPUT_NAME: ${{ matrix.artifact-name }}
        run: ./scripts/build-native-image.sh

      - name: Run diagnostic if build fails
        if: steps.build-native.outcome == 'failure'
        run: |
          chmod +x ./scripts/diagnose-native-image.sh
          ./scripts/diagnose-native-image.sh

      - name: Retry build with fixed parameters
        if: steps.build-native.outcome == 'failure'
        env:
          OUTPUT_NAME: ${{ matrix.artifact-name }}
        run: |
          # Retry with explicit initialization settings
          native-image \
            --no-fallback \
            --report-unsupported-elements-at-runtime \
            --initialize-at-build-time \
            --initialize-at-run-time=java.security.SecureRandom \
            --initialize-at-run-time=org.eclipse.jetty.server.Server \
            --initialize-at-run-time=org.eclipse.jetty.util.thread.QueuedThreadPool \
            --initialize-at-run-time=org.eclipse.jgit.lib.internal.WorkQueue \
            --initialize-at-run-time=org.eclipse.jgit.transport.HttpAuthMethod \
            --initialize-at-run-time=org.eclipse.jgit.internal.storage.file.WindowCache \
            --initialize-at-run-time=org.eclipse.jgit.util.FileUtils \
            -H:+ReportExceptionStackTraces \
            -H:-CheckToolchain \
            -H:ConfigurationFileDirectories=graalvm-config \
            -H:+PrintClassInitialization \
            -H:+AllowIncompleteClasspath \
            -H:+AddAllCharsets \
            -H:EnableURLProtocols=http,https \
            -H:ReflectionConfigurationFiles=graalvm-config/reflect-config.json \
            -H:ResourceConfigurationFiles=graalvm-config/resource-config.json \
            -H:+UnlockExperimentalVMOptions \
            -jar target/chrondb-*-standalone.jar \
            $OUTPUT_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-name }}
          if-no-files-found: error

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.artifact-name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}