{:paths     ["src" "resources"]
 :deps      {compojure/compojure                       {:mvn/version "1.7.0"}
             ring/ring-core                            {:mvn/version "1.10.0"}
             ring/ring-jetty-adapter                   {:mvn/version "1.10.0"}
             ring/ring-json                            {:mvn/version "0.5.1"}
             ring/ring-mock                            {:mvn/version "0.4.0"}
             ring/ring-devel                           {:mvn/version "1.10.0"}
             org.clojure/clojure                       {:mvn/version "1.11.1"}
             org.clojure/data.json                     {:mvn/version "2.4.0"}
             org.apache.lucene/lucene-core             {:mvn/version "9.8.0"}
             org.apache.lucene/lucene-queryparser      {:mvn/version "9.8.0"}
             org.apache.lucene/lucene-analyzers-common {:mvn/version "8.11.2"}
             org.eclipse.jgit/org.eclipse.jgit         {:mvn/version "6.7.0.202309050840-r"}
             org.slf4j/slf4j-api                       {:mvn/version "2.0.9"}
             org.slf4j/slf4j-simple                    {:mvn/version "2.0.9"}
             talltale/talltale                         {:mvn/version "0.4.3"}
             environ/environ                           {:mvn/version "1.2.0"}}
 :aliases   {:test    {:extra-paths ["test"]
                       :extra-deps  {io.github.cognitect-labs/test-runner {:git/tag "v0.5.1" :git/sha "dfb30dd"}
                                     redis.clients/jedis                  {:mvn/version "5.1.0"}}
                       :exec-fn cognitect.test-runner.api/test
                       :main-opts ["-m" "cognitect.test-runner"]}
             :test-no-redis {:extra-paths ["test"]
                             :extra-deps {org.clojure/tools.namespace {:mvn/version "1.4.4"}
                                          redis.clients/jedis         {:mvn/version "5.1.0"}}
                             :main-opts ["-m" "chrondb.run-tests-no-redis"]}
             :test-redis-only {:extra-paths ["test"]
                               :extra-deps {org.clojure/tools.namespace {:mvn/version "1.4.4"}
                                            redis.clients/jedis         {:mvn/version "5.1.0"}}
                               :main-opts ["-m" "chrondb.run-tests-redis-only"]}
             :test-redis-sequential {:extra-paths ["test"]
                                     :extra-deps {org.clojure/tools.namespace {:mvn/version "1.4.4"}
                                                  redis.clients/jedis         {:mvn/version "5.1.0"}}
                                     :main-opts ["-m" "chrondb.run-redis-tests-sequential"]}
             :run     {:main-opts ["-m" "chrondb.core"]
                       :exec-fn chrondb.core/-main
                       :exec-args {}
                       :doc "Run ChronDB with optional arguments:
                             - First non-flag arg: HTTP port (default: 3000)
                             - Second non-flag arg: Redis port (default: 6379)
                             - --disable-redis: Disable Redis server
                             - --disable-rest: Disable REST API server

                             Examples:
                             clojure -M:run                    # Run with default settings
                             clojure -M:run 8080 6380          # Run with custom ports
                             clojure -M:run --disable-redis    # Run only REST API
                             clojure -M:run --disable-rest     # Run only Redis server
                             clojure -X:run                    # Run with default settings
                             clojure -X:run :args '[\"8080\" \"--disable-redis\"]' # Custom port, no Redis"}
             :run-rest {:main-opts ["-m" "chrondb.core" "--disable-redis"]
                        :exec-fn chrondb.core/-main
                        :exec-args {:args ["--disable-redis"]}
                        :doc "Run only the REST API server (no Redis)"}
             :run-redis {:main-opts ["-m" "chrondb.core" "--disable-rest"]
                         :exec-fn chrondb.core/-main
                         :exec-args {:args ["--disable-rest"]}
                         :doc "Run only the Redis protocol server (no REST API)"}
             :example {:main-opts ["-m" "chrondb.example"]
                       :exec-fn chrondb.example/-main}
             :build {:deps {io.github.clojure/tools.build {:git/tag "v0.9.4" :git/sha "76b78fe"}}
                     :ns-default build}
             :dev {:extra-paths ["dev"]
                   :extra-deps {ring/ring-devel {:mvn/version "1.10.0"}}}
             :uberjar {:replace-deps {com.github.seancorfield/depstar {:mvn/version "2.1.303"}}
                       :exec-fn hf.depstar/uberjar
                       :exec-args {:aot true
                                   :jar "target/chrondb.jar"
                                   :main-class chrondb.core}}
             :coverage {:extra-paths ["test"]
                        :extra-deps {cloverage/cloverage {:mvn/version "1.2.4"}
                                     redis.clients/jedis {:mvn/version "5.1.0"}}
                        :main-opts ["-m" "cloverage.coverage"
                                    "--src-ns-path" "src"
                                    "--test-ns-path" "test"
                                    "--ns-regex" "chrondb.*"
                                    "--test-ns-regex" "chrondb.*test"
                                    "--fail-threshold" "65"
                                    "--codecov"
                                    "--html"
                                    "--output" "target/coverage"]}
             :coverage-no-redis {:extra-paths ["test"]
                                 :extra-deps {cloverage/cloverage {:mvn/version "1.2.4"}
                                              redis.clients/jedis {:mvn/version "5.1.0"}}
                                 :main-opts ["-m" "chrondb.run-coverage"]}
             :codox {:extra-deps {codox/codox {:mvn/version "0.10.8"}}
                     :exec-fn codox.main/generate-docs
                     :exec-args {:name "ChronDB"
                                 :version "0.1.0"
                                 :description "Chronological key/value Database storing based on database-shaped git (core) architecture"
                                 :source-paths ["src"]
                                 :output-path "docs/api"
                                 :source-uri "https://github.com/chrondb/chrondb/blob/main/{filepath}#L{line}"
                                 :metadata {:doc/format :markdown}
                                 :themes [:default]
                                 :namespaces [chrondb.core
                                              chrondb.storage.git
                                              chrondb.storage.memory
                                              chrondb.storage.protocol
                                              chrondb.index.lucene
                                              chrondb.index.protocol
                                              chrondb.index.memory
                                              chrondb.api.redis.core
                                              chrondb.api.redis.server
                                              chrondb.util.logging]}}}}
